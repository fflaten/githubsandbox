# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - .vscode/*

stages:
  - stage: Build
    pool:
      vmImage: windows-latest
    variables:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
    jobs:
      - job: build
        workspace:
          clean: all
        timeoutInMinutes: 3
        steps:
          - checkout: none
            fetchDepth: 1
          - powershell: git clone https://github.com/pester/Pester.git
          - powershell: dotnet restore "./src/csharp/Pester.sln"
            workingDirectory: $(Build.SourcesDirectory)/Pester
          - powershell: ./build.ps1 -Clean -Inline
            workingDirectory: $(Build.SourcesDirectory)/Pester
          - publish: $(Build.SourcesDirectory)/Pester
            artifact: all

  - stage: Analyze
    pool:
      vmImage: windows-latest
    variables:
      psModuleFolder: '$(System.DefaultWorkingDirectory)/modules'
    dependsOn: Build
    jobs:
      - job: analyze
        workspace:
          clean: all
        timeoutInMinutes: 3
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'all'
              targetPath: '$(Build.SourcesDirectory)'
          - task: Cache@2
            displayName: Cache ConvertToSARIF Module
            inputs:
              key:  psmodule | ConvertToSARIF1.0.0
              path: ${{ variables.psModuleFolder }}
              cacheHitVar: PSCacheUsed
          - task: PowerShell@2
            displayName: 'Download ConvertToSARIF module'
            condition: eq(variables.PSCacheUsed, 'true')
            inputs:
              targetType: 'inline'
              script: Save-Module -Name ConvertToSARIF -RequiredVersion 1.0.0 -Path '${{ variables.psModuleFolder }}' -Force
          - task: PowerShell@2
            displayName: 'Run PSScriptAnalyzer'
            continueOnError: true
            inputs:
              targetType: 'inline'
              script: |
                $env:PSModulePath = '${{ variables.psModuleFolder }}', $Env:PSModulePath -join [System.IO.Path]::PathSeparator
                Import-Module PSScriptAnalyzer
                Import-Module ConvertToSARIF
                $sarifName = 'results.sarif'

                Get-ChildItem -Path ./src -Filter *.ps1 -Recurse -File |
                Invoke-ScriptAnalyzer |
                ConvertTo-SARIF -FilePath $sarifName

                # Make paths relative
                $pathToRemove = 'file:///$(Build.SourcesDirectory)' -replace '\\', '/'
                $json = (Get-Content $sarifName -Raw).Replace($pathToRemove, '')
                
                # Add repo-reference to enable deeplinks to source
                $json = $json -replace '(?<=runs":\[\{)', '"versionControlProvenance": [{"repositoryUri": "$(Build.Repository.Uri)", "revisionId": "$(Build.SourceVersion)"}],'
                $json | Set-Content $sarifName

                # | Format-List RuleName, Severity, ScriptPath, Line, Column, Message
              workingDirectory: '$(Build.SourcesDirectory)'
          - task: PublishBuildArtifacts@1
            displayName: Publish SARIF Artifact from PSSA
            inputs:
              ArtifactName: CodeAnalysisLogs
              PathtoPublish: $(System.DefaultWorkingDirectory)/results.sarif